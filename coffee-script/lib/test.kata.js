// Generated by CoffeeScript 1.6.2
var f, should, someFunc;

if ((typeof module) === 'undefined') {
  console.log('running in the browser');
  chai.should();
  f = this.fibonacci;
} else {
  console.log('running in node');
  should = require('chai').should();
  f = require('./fibonacci.js');
}

someFunc = f.someFunc;

describe('A test suite', function() {
  it('someFunc should be true', function() {
    return someFunc().should.equal(true);
  });
  describe('A string of fifteen letters', function() {
    var myString;

    myString = "Now is the time";
    it('should be of type string', function() {
      return myString.should.be.a('string');
    });
    return it('should have a length of 15', function() {
      return myString.should.have.length(15);
    });
  });
  return describe('An array of three items', function() {
    var array;

    array = [1, 2, 3];
    it('should be of type array', function() {
      return array.should.be.a('array');
    });
    it('should have a length of 3', function() {
      return array.should.have.length(3);
    });
    return it('should return -1 when a searched for item is not present', function() {
      return array.indexOf(4).should.equal(-1);
    });
  });
});

describe('Graph tests', function() {
  describe('A graph with a single node', function() {
    return it('should starting at A and finishing at A have a length of zero', function() {
      var route;

      route = {
        length: function() {
          return 0;
        }
      };
      return route.length().should.equal(0);
    });
  });
  return describe('A graph with two nodes', function() {
    return it('should have a length of one', function() {
      var route;

      route = {
        itinerary: ['A', 'F'],
        length: function() {
          return this.itinerary.length - 1;
        }
      };
      return route.length().should.equal(1);
    });
  });
});
